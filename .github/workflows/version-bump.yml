name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      run: |
        # Read current version
        current_version=$(ruby -r './lib/issuer/version' -e 'puts Issuer::VERSION')
        echo "Current version: $current_version"
        
        # Calculate new version
        IFS='.' read -ra ADDR <<< "$current_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        
        case "${{ github.event.inputs.version_type }}" in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="$major.$minor.$patch"
        echo "New version: $new_version"
        
        # Update version file
        sed -i "s/VERSION = \".*\"/VERSION = \"$new_version\"/" lib/issuer/version.rb
        
        # Update gemspec if it has version references
        if grep -q "VERSION" issuer.gemspec; then
          echo "Version is dynamically loaded from version.rb"
        fi
        
        # Commit changes
        git add lib/issuer/version.rb
        git commit -m "Bump version to $new_version"
        git tag "v$new_version"
        git push origin main
        git push origin "v$new_version"
        
        echo "VERSION=$new_version" >> $GITHUB_ENV
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ### RubyGems
          ```bash
          gem install issuer
          ```
          
          ### Docker
          ```bash
          docker pull docopslab/issuer:${{ env.VERSION }}
          docker pull docopslab/issuer:latest
          ```
        draft: false
        prerelease: false
